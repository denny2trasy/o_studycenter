<html>
	<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8">
	<title>OpenTok API Sample &#151; Archiving Tutorial</title>
	<script src="http://staging.opentok.com/v0.91/js/TB.min.js" type="text/javascript" charset="utf-8"></script>
	<style type="text/css" media="screen">
			body {
				font-family:Arial, Helvetica, sans-serif;
			}
			.swfContainer {
				float:left;
				width: 264;
				margin-left: 5px;
			}
			#links {
				margin-left: 5px;
				margin-bottom: 12px;
			}
			#links a {
				display:none;
			}
		</style>

		<script type="text/javascript" charset="utf-8">
			var API_KEY = "375171"; //"1127"; // Replace with your API key.
			// var SESSION_ID = "1_MX4xMjMyMDgxfn4yMDExLTEwLTA3IDE5OjQ4OjE0LjUzNDMyOCswMDowMH4wLjQ1OTExMDY1MDIyOH4"; // Replace with your own session ID.
			
			var SESSION_ID = "<%= @schedule.session_id%>";  // "1_MX4zNzUxNzF-fjIwMTEtMTEtMjkgMDI6MTI6MjMuODM5NTAyKzAwOjAwfjAuOTkyNjE4NjQ5ODQ1fg";
			
								 // For staging, see https://staging.tokbox.com/hl/session/create
			var TOKEN = "moderator_token";
			var subscribers = {};

			var mySession;
			var publisher;
			var myArchive;
			var archiveCreated = false;

			// TB.setLogLevel(TB.ALL);
			TB.addEventListener(TB.EXCEPTION, exceptionHandler);
			
			// Called when the page is loaded. Initializes an OpenTok session.
			function init() {
				if (API_KEY == "" || SESSION_ID == "") {
					var error_message = "This page cannot connect. Please edit the"
					                   + "API_KEY and SESSION_ID values in the source code.";
					window.document.write(error_message);
					return;
				}
				mySession = TB.initSession(SESSION_ID);
				mySession.addEventListener("sessionConnected", sessionConnectedHandler);
				mySession.addEventListener("sessionDisconnected", sessionDisconnectedHandler);
				mySession.addEventListener("streamCreated", streamCreatedHandler);
				mySession.addEventListener("streamDestroyed", streamDestroyedHandler);
				connect();
			}

			// Connects to the OpenTok session.
			function connect() {
				mySession.connect(API_KEY, TOKEN);
				hide('connectLink');
			}

			// Called when the user clicks the Publish link. Publishes the local webcam's stream to the session.
			function publish() {
				if (!publisher) {
					var div = document.createElement('div');
					div.setAttribute('id', 'publisher');
					var publisherContainer = document.getElementById('publisherContainer');
					publisherContainer.appendChild(div);
					publisher = mySession.publish('publisher');

					var label = document.createElement('p');
					label.id = 'publisherLabel';
					label.style.marginTop = '0px';
					label.innerHTML = 'You';
					publisherContainer.appendChild(label);

					show("unpublishLink");
					hide("publishLink");
				}
			}

			// Called when the user clicks the Unpublish link.
			function unpublish() {
				if (publisher) {
					mySession.unpublish(publisher);
				}
				publisher = null;
				var publisherContainer = document.getElementById('publisherContainer');
				var publisherLabel = document.getElementById('publisherLabel');
				publisherContainer.removeChild(publisherLabel);
				show("publishLink");
				hide("unpublishLink");
			}

			/* Called when the session connects. Subscribes existing streams. Adds links in
			 * the page to publish. For moderators, adds event listeners for
			 * events related to archiving.
			 */
			function sessionConnectedHandler(event) {
				for (var i = 0; i < event.streams.length; i++) {
					addStream(event.streams[i]);
				}
				hide("connectLink");
				show("publishLink");
				if (mySession.capabilities.record) {
					if (event.archives.length == 0) {
						show("createArchiveLink");
					} else {
						myArchive = event.archives[0];
						show("closeArchiveLink");
					}
					mySession.addEventListener("sessionRecordingStarted", sessionRecordingStartedHandler);
					mySession.addEventListener("archiveCreated", archiveCreatedHandler);
					mySession.addEventListener("archiveClosed", archiveClosedHandler);
					mySession.addEventListener("sessionRecordingStopped", sessionRecordingStoppedHandler);
				}
				if (mySession.capabilities.playback) {
					mySession.addEventListener("archiveLoaded", archiveLoadedHandler);
					mySession.addEventListener("playbackStarted", playbackStartedHandler);
					mySession.addEventListener("playbackStopped", playbackStoppedHandler);
				}
			}

			function sessionDisconnectedHandler(event) {
				// Remove the publisher
				if (publisher) {
					unpublish();
				}
				// Remove all subscribers
				for (var streamId in subscribers) {
					removeStream(streamId);
				};

				alert("Disconnected from the session.")

				// Hide all links but the connect link
				hide("publishLink");
				hide("unpublishLink");
				hide("createArchiveLink");
				hide("recordSessionLink");
				hide("stopRecordingSessionLink");
				hide("loadArchiveLink");
				hide("startPlaybackLink");
				hide("stopPlaybackLink");
			}

			function streamCreatedHandler(event) {
				for (var i = 0; i < event.streams.length; i++) {
					addStream(event.streams[i]);
				}
			}

			function streamDestroyedHandler(event) {
				for (var i = 0; i < event.streams.length; i++) {
					removeStream(event.streams[i].streamId);

					if (mySession.getPublisherForStream(event.streams[i]) == publisher) {
						unpublish();
					}
				}
			}

			function removeStream(streamId) {
				var subscriber = subscribers[streamId];
				if (subscriber) {
					var container = document.getElementById(subscriber.id).parentNode;

					mySession.unsubscribe(subscriber);
					delete subscribers[streamId];

					// Clean up the subscriber's container
					document.body.removeChild(container);
				}
			}

			/* Subscribes to a stream and adds it to the page. The type of stream,
			 *  "live" or "recorded", is added as a label below the stream display.
			 */
			function addStream(stream) {
				// Do not subscribe to a stream the current user is publishing.
				if (stream.connection.connectionId == mySession.connection.connectionId) {
					return;
				}

				// Create the container for the subscriber
				var container = document.createElement('div');
				var containerId = "container_" + stream.streamId;
				container.setAttribute('id', containerId);
				container.className = "swfContainer";
				document.body.appendChild(container);

				// Create the div that will be replaced by the subscriber
				var div = document.createElement('div');
				var divId = stream.streamId;
				div.setAttribute('id', divId);
				div.style.float = 'top';
				container.appendChild(div);

				var label = document.createElement('p');
				label.style.marginTop = '0px';
				switch (stream.type) {
					case "archived" :
						label.innerHTML = 'Recorded';
						break;
					case "basic" :
						label.innerHTML = 'Live';
						break;
				}
				container.appendChild(label);

				subscribers[stream.streamId] = mySession.subscribe(stream, divId);
			}

			/* Called in response to the moderator clicking the "Create archive" link.
			 * Creates an archive and creates a unique name for it (based on a timestamp).
			 */
			function createArchive() {
				var uniqueTitle = "archive" + new Date().getTime();
				mySession.createArchive(API_KEY, "perSession", uniqueTitle);
				hide("createArchiveLink");
			}
			
			// Called in response to the archiveCreated event. The moderator can now record the session.
			function archiveCreatedHandler(event) {
				myArchive = event.archives[0];
				archiveCreated = true;
				show("recordSessionLink");
				show("closeArchiveLink");
			}

			function recordSession() {
				mySession.startRecording(myArchive);
				hide("recordSessionLink");
			}
			
			// Called in response to the sessionRecordingStarted event. The moderator can now stop recording.
			function sessionRecordingStartedHandler(event) {
				show("stopRecordingSessionLink");
			}

			/* Called in response to the moderator clicking the "Stop recording" link.
			 * Stops the recording.
			 */
			function stopRecordingSession() {
				mySession.stopRecording(myArchive);
				hide("stopRecordingSessionLink");
			}
			
			// Called in response to the sessionRecordingStopped event. The moderator can now close the archive.
			function sessionRecordingStoppedHandler(event) {
				show("closeArchiveLink");
			}

			/* Called in response to the moderator clicking the "Close archive" link.
			 * Closes the archive.
			 */
			function closeArchive() {
				mySession.closeArchive(myArchive);
				hide("closeArchiveLink");
			}

			// Called in response to the archiveClosed event. The moderator can now load the archive (and play it back).
			function archiveClosedHandler(event) {
				show("loadArchiveLink");
			}

			/* Called in response to the moderator clicking the "Load archive" link.
			 * Loads the archive that was just recorded.
			 */
			function loadArchive() {
				mySession.loadArchive(myArchive.archiveId);
				hide("loadArchiveLink");
			}

			// Called in response to the archiveLoaded event. The moderator can now start playing back the archive.
			function archiveLoadedHandler(event) {
				myArchive = event.archives[0];
				show("startPlaybackLink");
			}

			/* Called in response to the moderator clicking the "Start playback" link.
			 * Starts playing back the archive.
			 */
			function startPlayback() {
				myArchive.startPlayback();
				hide("startPlaybackLink");
			}
			
			// Called in response to the playbackStarted event. The moderator can now (optionally) stop playing back the archive.
			function playbackStartedHandler(event) {
				show("stopPlaybackLink");
			}

			/* Called in response to the moderator clicking the "Stop playback" link.
			 * Stops playing back the archive.
			 */
			function stopPlayback() {
				myArchive.stopPlayback();
				hide("stopPlaybackLink");
			}
			
			// Called in response to the playbackStopped event. The moderator can now (optionally) play back the archive again.
			function playbackStoppedHandler(event) {
				hide("stopPlaybackLink");
				show("startPlaybackLink");
			}

			function show(id) {
				document.getElementById(id).style.display = "block";
			}

			function hide(id) {
				document.getElementById(id).style.display = "none";
			}

			function exceptionHandler(event) {
				alert("Exception! msg: " + event.message + " title: " + event.title + " code: " + event.code);
			}

		</script>
	</head>
	<body onLoad="init()">
		<div id="links">
			<a href="#" onClick="connect(); return false;" id="connectLink">Connect</a>
			<a href="#" onClick="publish(); return false;" id="publishLink">Publish</a>
			<a href="#" onClick="unpublish(); return false;" id="unpublishLink">Unpublish</a>

           <a href="#" onClick="createArchive(); return false;" id="createArchiveLink">Create archive</a>
           <a href="#" onClick="recordSession(); return false;" id="recordSessionLink">Record session</a>
           <a href="#" onClick="stopRecordingSession(); return false;" id="stopRecordingSessionLink">Stop recording session</a>
           <a href="#" onClick="closeArchive(); return false;" id="closeArchiveLink">Close archive</a>

           <a href="#" onClick="loadArchive(); return false;" id="loadArchiveLink">Load archive</a>
           <a href="#" onClick="startPlayback(); return false;" id="startPlaybackLink">Start Playback</a>
           <a href="#" onClick="stopPlayback(); return false;" id="stopPlaybackLink">Stop Playback</a>
		</div>
		<div id="publisherContainer" class="swfContainer"></div>
	</body>
</html>
